#!/usr/bin/env ruby
#encoding: utf-8
require 'find'

name = ARGV[0]
option = ARGV[1]

def replace(filename, pattern, string)
  `sed -i 's/#{pattern}/#{string}/g' #{filename}`
end

def show_files(basedir)
  space  = "    "
  for dir in Dir[basedir]
    Find.find(dir) do |path|
      if FileTest.directory?(path)
          next
      else
        system("echo '#{space}' create '\033[31m #{path} \033[0m '; tput sgr0")
      end
    end
  end
end

def create(name, type, option = "")
  system("cp -r ~/scripts/latex/#{type} #{name}")
  system("mv #{name}/#{type}.tex #{name}/#{name}.tex")

  unless (option.eql?("-ata"))
    system("mv #{name}/bibliography/#{type}.bib #{name}/bibliography/#{name}.bib")
    replace("#{name}/*/99-references.tex", type, "#{name}")
  end

  replace("#{name}/Makefile", type, "#{name}")
  show_files(name)
end

if name.nil? || option.nil?
  puts "É necessário especificar o nome e tipo de documento"
  puts "\n latex_new nome \n \t -p   para apresentação \n \t -sbc para artigo da sbc \n \t -ata para ata da ciepe"
else
  if (File.exists?(name))
    puts "Nome inválido: arquivo ou diretório existente!"
  else
    if option.eql?("-p")
      create(name, "_presentation")
    elsif option.eql?("-sbc")
       create(name, "_sbc-template")
    elsif option.eql?("-ata")
       create(name, "_ata_ciepe", option)
    end
  end
end

#    files.each do |f|
#      system("echo     create '\033[31m #{f} \033[0m '; tput sgr0")
#    end

